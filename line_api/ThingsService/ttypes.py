#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ThingsDeviceProductType(object):
    CLOUD = 1
    BLE = 2

    _VALUES_TO_NAMES = {
        1: "CLOUD",
        2: "BLE",
    }

    _NAMES_TO_VALUES = {
        "CLOUD": 1,
        "BLE": 2,
    }


class ThingsErrorCode(object):
    INTERNAL_SERVER_ERROR = 0
    UNAUTHORIZED = 1
    INVALID_REQUEST = 2
    INVALID_STATE = 3

    _VALUES_TO_NAMES = {
        0: "INTERNAL_SERVER_ERROR",
        1: "UNAUTHORIZED",
        2: "INVALID_REQUEST",
        3: "INVALID_STATE",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_SERVER_ERROR": 0,
        "UNAUTHORIZED": 1,
        "INVALID_REQUEST": 2,
        "INVALID_STATE": 3,
    }


class ThingsDevice(object):
    """
    Attributes:
     - deviceId
     - actionUri
     - botMid
     - productType
     - providerName
     - profileImageLocation
     - channelIdList

    """


    def __init__(self, deviceId=None, actionUri=None, botMid=None, productType=None, providerName=None, profileImageLocation=None, channelIdList=None,):
        self.deviceId = deviceId
        self.actionUri = actionUri
        self.botMid = botMid
        self.productType = productType
        self.providerName = providerName
        self.profileImageLocation = profileImageLocation
        self.channelIdList = channelIdList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.actionUri = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.botMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.productType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.providerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.profileImageLocation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.channelIdList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.channelIdList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ThingsDevice')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.actionUri is not None:
            oprot.writeFieldBegin('actionUri', TType.STRING, 2)
            oprot.writeString(self.actionUri.encode('utf-8') if sys.version_info[0] == 2 else self.actionUri)
            oprot.writeFieldEnd()
        if self.botMid is not None:
            oprot.writeFieldBegin('botMid', TType.STRING, 3)
            oprot.writeString(self.botMid.encode('utf-8') if sys.version_info[0] == 2 else self.botMid)
            oprot.writeFieldEnd()
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 4)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.providerName is not None:
            oprot.writeFieldBegin('providerName', TType.STRING, 5)
            oprot.writeString(self.providerName.encode('utf-8') if sys.version_info[0] == 2 else self.providerName)
            oprot.writeFieldEnd()
        if self.profileImageLocation is not None:
            oprot.writeFieldBegin('profileImageLocation', TType.STRING, 6)
            oprot.writeString(self.profileImageLocation.encode('utf-8') if sys.version_info[0] == 2 else self.profileImageLocation)
            oprot.writeFieldEnd()
        if self.channelIdList is not None:
            oprot.writeFieldBegin('channelIdList', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.channelIdList))
            for iter6 in self.channelIdList:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BleProduct(object):
    """
    Attributes:
     - serviceUuid
     - psdiServiceUuid
     - psdiCharacteristicUuid
     - name
     - profileImageLocation

    """


    def __init__(self, serviceUuid=None, psdiServiceUuid=None, psdiCharacteristicUuid=None, name=None, profileImageLocation=None,):
        self.serviceUuid = serviceUuid
        self.psdiServiceUuid = psdiServiceUuid
        self.psdiCharacteristicUuid = psdiCharacteristicUuid
        self.name = name
        self.profileImageLocation = profileImageLocation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.psdiServiceUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.psdiCharacteristicUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.profileImageLocation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BleProduct')
        if self.serviceUuid is not None:
            oprot.writeFieldBegin('serviceUuid', TType.STRING, 1)
            oprot.writeString(self.serviceUuid.encode('utf-8') if sys.version_info[0] == 2 else self.serviceUuid)
            oprot.writeFieldEnd()
        if self.psdiServiceUuid is not None:
            oprot.writeFieldBegin('psdiServiceUuid', TType.STRING, 2)
            oprot.writeString(self.psdiServiceUuid.encode('utf-8') if sys.version_info[0] == 2 else self.psdiServiceUuid)
            oprot.writeFieldEnd()
        if self.psdiCharacteristicUuid is not None:
            oprot.writeFieldBegin('psdiCharacteristicUuid', TType.STRING, 3)
            oprot.writeString(self.psdiCharacteristicUuid.encode('utf-8') if sys.version_info[0] == 2 else self.psdiCharacteristicUuid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.profileImageLocation is not None:
            oprot.writeFieldBegin('profileImageLocation', TType.STRING, 5)
            oprot.writeString(self.profileImageLocation.encode('utf-8') if sys.version_info[0] == 2 else self.profileImageLocation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserDevice(object):
    """
    Attributes:
     - device
     - deviceDisplayName

    """


    def __init__(self, device=None, deviceDisplayName=None,):
        self.device = device
        self.deviceDisplayName = deviceDisplayName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.device = ThingsDevice()
                    self.device.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceDisplayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserDevice')
        if self.device is not None:
            oprot.writeFieldBegin('device', TType.STRUCT, 1)
            self.device.write(oprot)
            oprot.writeFieldEnd()
        if self.deviceDisplayName is not None:
            oprot.writeFieldBegin('deviceDisplayName', TType.STRING, 2)
            oprot.writeString(self.deviceDisplayName.encode('utf-8') if sys.version_info[0] == 2 else self.deviceDisplayName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetBleDeviceRequest(object):
    """
    Attributes:
     - serviceUuid
     - psdi

    """


    def __init__(self, serviceUuid=None, psdi=None,):
        self.serviceUuid = serviceUuid
        self.psdi = psdi

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceUuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.psdi = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetBleDeviceRequest')
        if self.serviceUuid is not None:
            oprot.writeFieldBegin('serviceUuid', TType.STRING, 1)
            oprot.writeString(self.serviceUuid.encode('utf-8') if sys.version_info[0] == 2 else self.serviceUuid)
            oprot.writeFieldEnd()
        if self.psdi is not None:
            oprot.writeFieldBegin('psdi', TType.STRING, 2)
            oprot.writeString(self.psdi.encode('utf-8') if sys.version_info[0] == 2 else self.psdi)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeviceLinkRequest(object):
    """
    Attributes:
     - deviceId

    """


    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeviceLinkRequest')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeviceUnlinkRequest(object):
    """
    Attributes:
     - deviceId

    """


    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeviceUnlinkRequest')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThingsException(TException):
    """
    Attributes:
     - code
     - reason

    """


    def __init__(self, code=None, reason=None,):
        super(ThingsException, self).__setattr__('code', code)
        super(ThingsException, self).__setattr__('reason', reason)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, self.reason, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        reason = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
            reason=reason,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ThingsException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ThingsDevice)
ThingsDevice.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'actionUri', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'botMid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'productType', None, None, ),  # 4
    (5, TType.STRING, 'providerName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'profileImageLocation', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'channelIdList', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(BleProduct)
BleProduct.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'psdiServiceUuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'psdiCharacteristicUuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'profileImageLocation', 'UTF8', None, ),  # 5
)
all_structs.append(UserDevice)
UserDevice.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'device', [ThingsDevice, None], None, ),  # 1
    (2, TType.STRING, 'deviceDisplayName', 'UTF8', None, ),  # 2
)
all_structs.append(GetBleDeviceRequest)
GetBleDeviceRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'psdi', 'UTF8', None, ),  # 2
)
all_structs.append(DeviceLinkRequest)
DeviceLinkRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
)
all_structs.append(DeviceUnlinkRequest)
DeviceUnlinkRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
)
all_structs.append(ThingsException)
ThingsException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs

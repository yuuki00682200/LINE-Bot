#
# Autogenerated by Frugal Compiler (3.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from frugal.util import make_hashable
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol


class SearchErrorCode(int):
    UNKNOWN = 0
    SUCCESS = 1
    AUTHENTICATION_FAILURE = 2
    TIMEOUT = 3
    MAINTENANCE = 4
    ILLEGAL_ARGUMENT = 5
    INTERNAL_ERROR = 6

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "SUCCESS",
        2: "AUTHENTICATION_FAILURE",
        3: "TIMEOUT",
        4: "MAINTENANCE",
        5: "ILLEGAL_ARGUMENT",
        6: "INTERNAL_ERROR",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "SUCCESS": 1,
        "AUTHENTICATION_FAILURE": 2,
        "TIMEOUT": 3,
        "MAINTENANCE": 4,
        "ILLEGAL_ARGUMENT": 5,
        "INTERNAL_ERROR": 6,
    }

class SpotItemCategory(int):
    UNKNOWN = 0
    GOURMET = 1
    BEAUTY = 2
    TRAVEL = 3
    SHOPPING = 4
    ENTERTAINMENT = 5
    SPORTS = 6
    TRANSPORT = 7
    LIFE = 8
    HOSPITAL = 9
    FINANCE = 10
    EDUCATION = 11
    OTHER = 12
    ALL = 0

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "GOURMET",
        2: "BEAUTY",
        3: "TRAVEL",
        4: "SHOPPING",
        5: "ENTERTAINMENT",
        6: "SPORTS",
        7: "TRANSPORT",
        8: "LIFE",
        9: "HOSPITAL",
        10: "FINANCE",
        11: "EDUCATION",
        12: "OTHER",
        0: "ALL",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "GOURMET": 1,
        "BEAUTY": 2,
        "TRAVEL": 3,
        "SHOPPING": 4,
        "ENTERTAINMENT": 5,
        "SPORTS": 6,
        "TRANSPORT": 7,
        "LIFE": 8,
        "HOSPITAL": 9,
        "FINANCE": 10,
        "EDUCATION": 11,
        "OTHER": 12,
        "ALL": 0,
    }

class ProductSearchSummaryType(int):
    STICKER = 1
    THEME = 2
    STICON = 3

    _VALUES_TO_NAMES = {
        1: "STICKER",
        2: "THEME",
        3: "STICON",
    }

    _NAMES_TO_VALUES = {
        "STICKER": 1,
        "THEME": 2,
        "STICON": 3,
    }

class PromotionInfoType(int):
    NONE = 0
    CARRIER = 1
    BUDDY = 2
    INSTALL = 3
    MISSION = 4
    MUSTBUY = 5

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "CARRIER",
        2: "BUDDY",
        3: "INSTALL",
        4: "MISSION",
        5: "MUSTBUY",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "CARRIER": 1,
        "BUDDY": 2,
        "INSTALL": 3,
        "MISSION": 4,
        "MUSTBUY": 5,
    }

class StickerResourceType(int):
    STATIC = 1
    ANIMATION = 2
    SOUND = 3
    ANIMATION_SOUND = 4
    POPUP = 5
    POPUP_SOUND = 6

    _VALUES_TO_NAMES = {
        1: "STATIC",
        2: "ANIMATION",
        3: "SOUND",
        4: "ANIMATION_SOUND",
        5: "POPUP",
        6: "POPUP_SOUND",
    }

    _NAMES_TO_VALUES = {
        "STATIC": 1,
        "ANIMATION": 2,
        "SOUND": 3,
        "ANIMATION_SOUND": 4,
        "POPUP": 5,
        "POPUP_SOUND": 6,
    }

class ThemeResourceType(int):
    STATIC = 1
    ANIMATION = 2

    _VALUES_TO_NAMES = {
        1: "STATIC",
        2: "ANIMATION",
    }

    _NAMES_TO_VALUES = {
        "STATIC": 1,
        "ANIMATION": 2,
    }

class ProductSearchSummarySubType(int):
    GENERAL = 0
    CREATORS = 1
    STICON = 2

    _VALUES_TO_NAMES = {
        0: "GENERAL",
        1: "CREATORS",
        2: "STICON",
    }

    _NAMES_TO_VALUES = {
        "GENERAL": 0,
        "CREATORS": 1,
        "STICON": 2,
    }

class PromotionMissionType(int):
    DEFAULT = 1
    VIEW_VIDEO = 2

    _VALUES_TO_NAMES = {
        1: "DEFAULT",
        2: "VIEW_VIDEO",
    }

    _NAMES_TO_VALUES = {
        "DEFAULT": 1,
        "VIEW_VIDEO": 2,
    }

class BotType(int):
    RESERVED = 0
    OFFICIAL = 1
    LINE_AT_0 = 2
    LINE_AT = 3

    _VALUES_TO_NAMES = {
        0: "RESERVED",
        1: "OFFICIAL",
        2: "LINE_AT_0",
        3: "LINE_AT",
    }

    _NAMES_TO_VALUES = {
        "RESERVED": 0,
        "OFFICIAL": 1,
        "LINE_AT_0": 2,
        "LINE_AT": 3,
    }

class SquareType(int):
    CLOSED = 0
    OPEN = 1

    _VALUES_TO_NAMES = {
        0: "CLOSED",
        1: "OPEN",
    }

    _NAMES_TO_VALUES = {
        "CLOSED": 0,
        "OPEN": 1,
    }

class SquareChatState(int):
    ALIVE = 0
    DELETED = 1
    SUSPENDED = 2

    _VALUES_TO_NAMES = {
        0: "ALIVE",
        1: "DELETED",
        2: "SUSPENDED",
    }

    _NAMES_TO_VALUES = {
        "ALIVE": 0,
        "DELETED": 1,
        "SUSPENDED": 2,
    }

class AutocompleteCandidate(object):
    """
    Attributes:
     - candidate
    """
    def __init__(self, candidate=None):
        self.candidate = candidate

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.candidate = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AutocompleteCandidate')
        if self.candidate is not None:
            oprot.writeFieldBegin('candidate', TType.STRING, 1)
            oprot.writeString(self.candidate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.candidate))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AutocompleteResult(object):
    """
    Attributes:
     - modifiedQueries
     - candidates
    """
    def __init__(self, modifiedQueries=None, candidates=None):
        self.modifiedQueries = modifiedQueries
        self.candidates = candidates

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.modifiedQueries = []
                    (_, elem0) = iprot.readListBegin()
                    for _ in range(elem0):
                        elem1 = iprot.readString()
                        self.modifiedQueries.append(elem1)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.candidates = []
                    (_, elem2) = iprot.readListBegin()
                    for _ in range(elem2):
                        elem3 = AutocompleteCandidate()
                        elem3.read(iprot)
                        self.candidates.append(elem3)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AutocompleteResult')
        if self.modifiedQueries is not None:
            oprot.writeFieldBegin('modifiedQueries', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.modifiedQueries))
            for elem4 in self.modifiedQueries:
                oprot.writeString(elem4)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.candidates is not None:
            oprot.writeFieldBegin('candidates', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.candidates))
            for elem5 in self.candidates:
                elem5.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.modifiedQueries))
        value = (value * 31) ^ hash(make_hashable(self.candidates))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Notice(object):
    """
    Attributes:
     - type
     - notice
     - startTime
     - endTime
    """
    def __init__(self, type=None, notice=None, startTime=None, endTime=None):
        self.type = type
        self.notice = notice
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.notice = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.startTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.endTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Notice')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.notice is not None:
            oprot.writeFieldBegin('notice', TType.STRING, 2)
            oprot.writeString(self.notice)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I32, 3)
            oprot.writeI32(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I32, 4)
            oprot.writeI32(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.notice))
        value = (value * 31) ^ hash(make_hashable(self.startTime))
        value = (value * 31) ^ hash(make_hashable(self.endTime))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class KeywordInfo(object):
    """
    Attributes:
     - keyword
     - iconPath
     - label
     - locationInfoAgreement
    """
    def __init__(self, keyword=None, iconPath=None, label=None, locationInfoAgreement=None):
        self.keyword = keyword
        self.iconPath = iconPath
        self.label = label
        self.locationInfoAgreement = locationInfoAgreement

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keyword = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.iconPath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.label = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.locationInfoAgreement = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('KeywordInfo')
        if self.keyword is not None:
            oprot.writeFieldBegin('keyword', TType.STRING, 1)
            oprot.writeString(self.keyword)
            oprot.writeFieldEnd()
        if self.iconPath is not None:
            oprot.writeFieldBegin('iconPath', TType.STRING, 2)
            oprot.writeString(self.iconPath)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 3)
            oprot.writeString(self.label)
            oprot.writeFieldEnd()
        if self.locationInfoAgreement is not None:
            oprot.writeFieldBegin('locationInfoAgreement', TType.BOOL, 4)
            oprot.writeBool(self.locationInfoAgreement)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.keyword))
        value = (value * 31) ^ hash(make_hashable(self.iconPath))
        value = (value * 31) ^ hash(make_hashable(self.label))
        value = (value * 31) ^ hash(make_hashable(self.locationInfoAgreement))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchSection(object):
    """
    Attributes:
     - type
     - title
     - keywordInfos
    """
    def __init__(self, type=None, title=None, keywordInfos=None):
        self.type = type
        self.title = title
        self.keywordInfos = keywordInfos

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.keywordInfos = KeywordInfo()
                    self.keywordInfos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchSection')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.keywordInfos is not None:
            oprot.writeFieldBegin('keywordInfos', TType.STRUCT, 3)
            self.keywordInfos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.keywordInfos))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CategoryItem(object):
    """
    Attributes:
     - collection
     - categoryId
     - name
    """
    def __init__(self, collection=None, categoryId=None, name=None):
        self.collection = collection
        self.categoryId = categoryId
        self.name = name

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.collection = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.categoryId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('CategoryItem')
        if self.collection is not None:
            oprot.writeFieldBegin('collection', TType.I32, 1)
            oprot.writeI32(self.collection)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.I32, 2)
            oprot.writeI32(self.categoryId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.collection))
        value = (value * 31) ^ hash(make_hashable(self.categoryId))
        value = (value * 31) ^ hash(make_hashable(self.name))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SpotItem(object):
    """
    Attributes:
     - name
     - phone
     - category
     - mid
     - countryAreaCode
     - freePhoneCallable
    """
    def __init__(self, name=None, phone=None, category=None, mid=None, countryAreaCode=None, freePhoneCallable=None):
        self.name = name
        self.phone = phone
        self.category = category
        self.mid = mid
        self.countryAreaCode = countryAreaCode
        self.freePhoneCallable = freePhoneCallable

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.phone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.category = SpotItemCategory(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.countryAreaCode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.freePhoneCallable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SpotItem')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 3)
            oprot.writeString(self.phone)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.I32, 4)
            oprot.writeI32(self.category)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 5)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.countryAreaCode is not None:
            oprot.writeFieldBegin('countryAreaCode', TType.STRING, 6)
            oprot.writeString(self.countryAreaCode)
            oprot.writeFieldEnd()
        if self.freePhoneCallable is not None:
            oprot.writeFieldBegin('freePhoneCallable', TType.BOOL, 10)
            oprot.writeBool(self.freePhoneCallable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.phone))
        value = (value * 31) ^ hash(make_hashable(self.category))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.countryAreaCode))
        value = (value * 31) ^ hash(make_hashable(self.freePhoneCallable))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class StickerProperty(object):
    """
    Attributes:
     - hasAnimation
     - hasSound
     - hasPopup
     - stickerResourceType
     - stickerOptions
     - compactStickerOptions
     - stickerHash
     - stickerIds
    """
    def __init__(self, hasAnimation=None, hasSound=None, hasPopup=None, stickerResourceType=None, stickerOptions=None, compactStickerOptions=None, stickerHash=None, stickerIds=None):
        self.hasAnimation = hasAnimation
        self.hasSound = hasSound
        self.hasPopup = hasPopup
        self.stickerResourceType = stickerResourceType
        self.stickerOptions = stickerOptions
        self.compactStickerOptions = compactStickerOptions
        self.stickerHash = stickerHash
        self.stickerIds = stickerIds

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.hasAnimation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasSound = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hasPopup = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.stickerResourceType = StickerResourceType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.stickerOptions = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.compactStickerOptions = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.stickerHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.stickerIds = []
                    (_, elem6) = iprot.readListBegin()
                    for _ in range(elem6):
                        elem7 = iprot.readString()
                        self.stickerIds.append(elem7)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('StickerProperty')
        if self.hasAnimation is not None:
            oprot.writeFieldBegin('hasAnimation', TType.BOOL, 1)
            oprot.writeBool(self.hasAnimation)
            oprot.writeFieldEnd()
        if self.hasSound is not None:
            oprot.writeFieldBegin('hasSound', TType.BOOL, 2)
            oprot.writeBool(self.hasSound)
            oprot.writeFieldEnd()
        if self.hasPopup is not None:
            oprot.writeFieldBegin('hasPopup', TType.BOOL, 3)
            oprot.writeBool(self.hasPopup)
            oprot.writeFieldEnd()
        if self.stickerResourceType is not None:
            oprot.writeFieldBegin('stickerResourceType', TType.I32, 4)
            oprot.writeI32(self.stickerResourceType)
            oprot.writeFieldEnd()
        if self.stickerOptions is not None:
            oprot.writeFieldBegin('stickerOptions', TType.STRING, 5)
            oprot.writeString(self.stickerOptions)
            oprot.writeFieldEnd()
        if self.compactStickerOptions is not None:
            oprot.writeFieldBegin('compactStickerOptions', TType.I32, 6)
            oprot.writeI32(self.compactStickerOptions)
            oprot.writeFieldEnd()
        if self.stickerHash is not None:
            oprot.writeFieldBegin('stickerHash', TType.STRING, 7)
            oprot.writeString(self.stickerHash)
            oprot.writeFieldEnd()
        if self.stickerIds is not None:
            oprot.writeFieldBegin('stickerIds', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.stickerIds))
            for elem8 in self.stickerIds:
                oprot.writeString(elem8)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.hasAnimation))
        value = (value * 31) ^ hash(make_hashable(self.hasSound))
        value = (value * 31) ^ hash(make_hashable(self.hasPopup))
        value = (value * 31) ^ hash(make_hashable(self.stickerResourceType))
        value = (value * 31) ^ hash(make_hashable(self.stickerOptions))
        value = (value * 31) ^ hash(make_hashable(self.compactStickerOptions))
        value = (value * 31) ^ hash(make_hashable(self.stickerHash))
        value = (value * 31) ^ hash(make_hashable(self.stickerIds))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ThemeProperty(object):
    """
    Attributes:
     - thumbnailUrl
     - themeResourceType
    """
    def __init__(self, thumbnailUrl=None, themeResourceType=None):
        self.thumbnailUrl = thumbnailUrl
        self.themeResourceType = themeResourceType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.themeResourceType = ThemeResourceType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ThemeProperty')
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 1)
            oprot.writeString(self.thumbnailUrl)
            oprot.writeFieldEnd()
        if self.themeResourceType is not None:
            oprot.writeFieldBegin('themeResourceType', TType.I32, 2)
            oprot.writeI32(self.themeResourceType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.thumbnailUrl))
        value = (value * 31) ^ hash(make_hashable(self.themeResourceType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SticonProperty(object):
    """
    Attributes:
     - sticonIds
    """
    def __init__(self, sticonIds=None):
        self.sticonIds = sticonIds

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.LIST:
                    self.sticonIds = []
                    (_, elem9) = iprot.readListBegin()
                    for _ in range(elem9):
                        elem10 = iprot.readString()
                        self.sticonIds.append(elem10)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SticonProperty')
        if self.sticonIds is not None:
            oprot.writeFieldBegin('sticonIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.sticonIds))
            for elem11 in self.sticonIds:
                oprot.writeString(elem11)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.sticonIds))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProductProperty(object):
    """
    Attributes:
     - stickerProperty
     - themeProperty
     - sticonProperty
    """
    def __init__(self, stickerProperty=None, themeProperty=None, sticonProperty=None):
        self.stickerProperty = stickerProperty
        self.themeProperty = themeProperty
        self.sticonProperty = sticonProperty

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.stickerProperty = StickerProperty()
                    self.stickerProperty.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.themeProperty = ThemeProperty()
                    self.themeProperty.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sticonProperty = SticonProperty()
                    self.sticonProperty.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProductProperty')
        if self.stickerProperty is not None:
            oprot.writeFieldBegin('stickerProperty', TType.STRUCT, 1)
            self.stickerProperty.write(oprot)
            oprot.writeFieldEnd()
        if self.themeProperty is not None:
            oprot.writeFieldBegin('themeProperty', TType.STRUCT, 2)
            self.themeProperty.write(oprot)
            oprot.writeFieldEnd()
        if self.sticonProperty is not None:
            oprot.writeFieldBegin('sticonProperty', TType.STRUCT, 3)
            self.sticonProperty.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.stickerProperty))
        value = (value * 31) ^ hash(make_hashable(self.themeProperty))
        value = (value * 31) ^ hash(make_hashable(self.sticonProperty))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PromotionBuddyInfo(object):
    """
    Attributes:
     - buddyMid
    """
    def __init__(self, buddyMid=None):
        self.buddyMid = buddyMid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.buddyMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PromotionBuddyInfo')
        if self.buddyMid is not None:
            oprot.writeFieldBegin('buddyMid', TType.STRING, 1)
            oprot.writeString(self.buddyMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.buddyMid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PromotionInstallInfo(object):
    """
    Attributes:
     - downloadUrl
     - customUrlSchema
    """
    def __init__(self, downloadUrl=None, customUrlSchema=None):
        self.downloadUrl = downloadUrl
        self.customUrlSchema = customUrlSchema

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.downloadUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.customUrlSchema = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PromotionInstallInfo')
        if self.downloadUrl is not None:
            oprot.writeFieldBegin('downloadUrl', TType.STRING, 1)
            oprot.writeString(self.downloadUrl)
            oprot.writeFieldEnd()
        if self.customUrlSchema is not None:
            oprot.writeFieldBegin('customUrlSchema', TType.STRING, 2)
            oprot.writeString(self.customUrlSchema)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.downloadUrl))
        value = (value * 31) ^ hash(make_hashable(self.customUrlSchema))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PromotionMissionInfo(object):
    """
    Attributes:
     - promotionMissionType
     - missionCompleted
     - downloadUrl
     - customUrlSchema
    """
    def __init__(self, promotionMissionType=None, missionCompleted=None, downloadUrl=None, customUrlSchema=None):
        self.promotionMissionType = promotionMissionType
        self.missionCompleted = missionCompleted
        self.downloadUrl = downloadUrl
        self.customUrlSchema = customUrlSchema

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.promotionMissionType = PromotionMissionType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.missionCompleted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.downloadUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.customUrlSchema = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PromotionMissionInfo')
        if self.promotionMissionType is not None:
            oprot.writeFieldBegin('promotionMissionType', TType.I32, 1)
            oprot.writeI32(self.promotionMissionType)
            oprot.writeFieldEnd()
        if self.missionCompleted is not None:
            oprot.writeFieldBegin('missionCompleted', TType.BOOL, 2)
            oprot.writeBool(self.missionCompleted)
            oprot.writeFieldEnd()
        if self.downloadUrl is not None:
            oprot.writeFieldBegin('downloadUrl', TType.STRING, 3)
            oprot.writeString(self.downloadUrl)
            oprot.writeFieldEnd()
        if self.customUrlSchema is not None:
            oprot.writeFieldBegin('customUrlSchema', TType.STRING, 4)
            oprot.writeString(self.customUrlSchema)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.promotionMissionType))
        value = (value * 31) ^ hash(make_hashable(self.missionCompleted))
        value = (value * 31) ^ hash(make_hashable(self.downloadUrl))
        value = (value * 31) ^ hash(make_hashable(self.customUrlSchema))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PromotionDetail(object):
    """
    Attributes:
     - promotionBuddyInfo
     - promotionInstallInfo
     - promotionMissionInfo
    """
    def __init__(self, promotionBuddyInfo=None, promotionInstallInfo=None, promotionMissionInfo=None):
        self.promotionBuddyInfo = promotionBuddyInfo
        self.promotionInstallInfo = promotionInstallInfo
        self.promotionMissionInfo = promotionMissionInfo

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.promotionBuddyInfo = PromotionBuddyInfo()
                    self.promotionBuddyInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.promotionInstallInfo = PromotionInstallInfo()
                    self.promotionInstallInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.promotionMissionInfo = PromotionMissionInfo()
                    self.promotionMissionInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PromotionDetail')
        if self.promotionBuddyInfo is not None:
            oprot.writeFieldBegin('promotionBuddyInfo', TType.STRUCT, 1)
            self.promotionBuddyInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.promotionInstallInfo is not None:
            oprot.writeFieldBegin('promotionInstallInfo', TType.STRUCT, 2)
            self.promotionInstallInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.promotionMissionInfo is not None:
            oprot.writeFieldBegin('promotionMissionInfo', TType.STRUCT, 3)
            self.promotionMissionInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.promotionBuddyInfo))
        value = (value * 31) ^ hash(make_hashable(self.promotionInstallInfo))
        value = (value * 31) ^ hash(make_hashable(self.promotionMissionInfo))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class PromotionInfo(object):
    """
    Attributes:
     - promotionType
     - buddyInfo
     - promotionDetail
    """
    def __init__(self, promotionType=None, buddyInfo=None, promotionDetail=None):
        self.promotionType = promotionType
        self.buddyInfo = buddyInfo
        self.promotionDetail = promotionDetail

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.promotionType = PromotionInfoType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRUCT:
                    self.buddyInfo = PromotionBuddyInfo()
                    self.buddyInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.promotionDetail = PromotionDetail()
                    self.promotionDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('PromotionInfo')
        if self.promotionType is not None:
            oprot.writeFieldBegin('promotionType', TType.I32, 1)
            oprot.writeI32(self.promotionType)
            oprot.writeFieldEnd()
        if self.buddyInfo is not None:
            oprot.writeFieldBegin('buddyInfo', TType.STRUCT, 51)
            self.buddyInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.promotionDetail is not None:
            oprot.writeFieldBegin('promotionDetail', TType.STRUCT, 2)
            self.promotionDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.promotionType))
        value = (value * 31) ^ hash(make_hashable(self.buddyInfo))
        value = (value * 31) ^ hash(make_hashable(self.promotionDetail))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ProductSearchSummary(object):
    """
    Attributes:
     - id
     - type
     - name
     - author
     - promotionInfo
     - version
     - newFlag
     - priceTier
     - priceInLineCoin
     - property
     - subType
     - onSale
     - availableForPresent
     - availableForPurchase
     - validDays
     - authorId
     - bargainFlag
    """
    def __init__(self, id=None, type=None, name=None, author=None, promotionInfo=None, version=None, newFlag=None, priceTier=None, priceInLineCoin=None, property=None, subType=None, onSale=None, availableForPresent=None, availableForPurchase=None, validDays=None, authorId=None, bargainFlag=None):
        self.id = id
        self.type = type
        self.name = name
        self.author = author
        self.promotionInfo = promotionInfo
        self.version = version
        self.newFlag = newFlag
        self.priceTier = priceTier
        self.priceInLineCoin = priceInLineCoin
        self.property = property
        self.subType = subType
        self.onSale = onSale
        self.availableForPresent = availableForPresent
        self.availableForPurchase = availableForPurchase
        self.validDays = validDays
        self.authorId = authorId
        self.bargainFlag = bargainFlag

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = ProductSearchSummaryType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.author = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.promotionInfo = PromotionInfo()
                    self.promotionInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.version = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.newFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.priceTier = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.priceInLineCoin = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.property = ProductProperty()
                    self.property.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.subType = ProductSearchSummarySubType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.onSale = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.availableForPresent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.availableForPurchase = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.validDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.authorId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.bargainFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ProductSearchSummary')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.author is not None:
            oprot.writeFieldBegin('author', TType.STRING, 4)
            oprot.writeString(self.author)
            oprot.writeFieldEnd()
        if self.promotionInfo is not None:
            oprot.writeFieldBegin('promotionInfo', TType.STRUCT, 5)
            self.promotionInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I64, 6)
            oprot.writeI64(self.version)
            oprot.writeFieldEnd()
        if self.newFlag is not None:
            oprot.writeFieldBegin('newFlag', TType.BOOL, 7)
            oprot.writeBool(self.newFlag)
            oprot.writeFieldEnd()
        if self.priceTier is not None:
            oprot.writeFieldBegin('priceTier', TType.I32, 8)
            oprot.writeI32(self.priceTier)
            oprot.writeFieldEnd()
        if self.priceInLineCoin is not None:
            oprot.writeFieldBegin('priceInLineCoin', TType.STRING, 9)
            oprot.writeString(self.priceInLineCoin)
            oprot.writeFieldEnd()
        if self.property is not None:
            oprot.writeFieldBegin('property', TType.STRUCT, 10)
            self.property.write(oprot)
            oprot.writeFieldEnd()
        if self.subType is not None:
            oprot.writeFieldBegin('subType', TType.I32, 11)
            oprot.writeI32(self.subType)
            oprot.writeFieldEnd()
        if self.onSale is not None:
            oprot.writeFieldBegin('onSale', TType.BOOL, 12)
            oprot.writeBool(self.onSale)
            oprot.writeFieldEnd()
        if self.availableForPresent is not None:
            oprot.writeFieldBegin('availableForPresent', TType.BOOL, 13)
            oprot.writeBool(self.availableForPresent)
            oprot.writeFieldEnd()
        if self.availableForPurchase is not None:
            oprot.writeFieldBegin('availableForPurchase', TType.BOOL, 14)
            oprot.writeBool(self.availableForPurchase)
            oprot.writeFieldEnd()
        if self.validDays is not None:
            oprot.writeFieldBegin('validDays', TType.I32, 15)
            oprot.writeI32(self.validDays)
            oprot.writeFieldEnd()
        if self.authorId is not None:
            oprot.writeFieldBegin('authorId', TType.STRING, 16)
            oprot.writeString(self.authorId)
            oprot.writeFieldEnd()
        if self.bargainFlag is not None:
            oprot.writeFieldBegin('bargainFlag', TType.BOOL, 17)
            oprot.writeBool(self.bargainFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.author))
        value = (value * 31) ^ hash(make_hashable(self.promotionInfo))
        value = (value * 31) ^ hash(make_hashable(self.version))
        value = (value * 31) ^ hash(make_hashable(self.newFlag))
        value = (value * 31) ^ hash(make_hashable(self.priceTier))
        value = (value * 31) ^ hash(make_hashable(self.priceInLineCoin))
        value = (value * 31) ^ hash(make_hashable(self.property))
        value = (value * 31) ^ hash(make_hashable(self.subType))
        value = (value * 31) ^ hash(make_hashable(self.onSale))
        value = (value * 31) ^ hash(make_hashable(self.availableForPresent))
        value = (value * 31) ^ hash(make_hashable(self.availableForPurchase))
        value = (value * 31) ^ hash(make_hashable(self.validDays))
        value = (value * 31) ^ hash(make_hashable(self.authorId))
        value = (value * 31) ^ hash(make_hashable(self.bargainFlag))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ServiceItem(object):
    """
    Attributes:
     - id
     - title
     - type
     - subType
     - appId
     - channelId
     - badge
     - iconUrl
     - downloadUrl
     - launchScheme
     - iconTint
    """
    def __init__(self, id=None, title=None, type=None, subType=None, appId=None, channelId=None, badge=None, iconUrl=None, downloadUrl=None, launchScheme=None, iconTint=None):
        self.id = id
        self.title = title
        self.type = type
        self.subType = subType
        self.appId = appId
        self.channelId = channelId
        self.badge = badge
        self.iconUrl = iconUrl
        self.downloadUrl = downloadUrl
        self.launchScheme = launchScheme
        self.iconTint = iconTint

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.subType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.appId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.badge = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.iconUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.downloadUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.launchScheme = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.iconTint = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ServiceItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.subType is not None:
            oprot.writeFieldBegin('subType', TType.I32, 4)
            oprot.writeI32(self.subType)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 5)
            oprot.writeString(self.appId)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 6)
            oprot.writeString(self.channelId)
            oprot.writeFieldEnd()
        if self.badge is not None:
            oprot.writeFieldBegin('badge', TType.STRING, 7)
            oprot.writeString(self.badge)
            oprot.writeFieldEnd()
        if self.iconUrl is not None:
            oprot.writeFieldBegin('iconUrl', TType.STRING, 8)
            oprot.writeString(self.iconUrl)
            oprot.writeFieldEnd()
        if self.downloadUrl is not None:
            oprot.writeFieldBegin('downloadUrl', TType.STRING, 9)
            oprot.writeString(self.downloadUrl)
            oprot.writeFieldEnd()
        if self.launchScheme is not None:
            oprot.writeFieldBegin('launchScheme', TType.STRING, 10)
            oprot.writeString(self.launchScheme)
            oprot.writeFieldEnd()
        if self.iconTint is not None:
            oprot.writeFieldBegin('iconTint', TType.BOOL, 11)
            oprot.writeBool(self.iconTint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.subType))
        value = (value * 31) ^ hash(make_hashable(self.appId))
        value = (value * 31) ^ hash(make_hashable(self.channelId))
        value = (value * 31) ^ hash(make_hashable(self.badge))
        value = (value * 31) ^ hash(make_hashable(self.iconUrl))
        value = (value * 31) ^ hash(make_hashable(self.downloadUrl))
        value = (value * 31) ^ hash(make_hashable(self.launchScheme))
        value = (value * 31) ^ hash(make_hashable(self.iconTint))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AdditionalInfoItem(object):
    """
    Attributes:
     - id
     - type
     - title
     - descr
     - iconUrl
     - link
    """
    def __init__(self, id=None, type=None, title=None, descr=None, iconUrl=None, link=None):
        self.id = id
        self.type = type
        self.title = title
        self.descr = descr
        self.iconUrl = iconUrl
        self.link = link

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.descr = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.iconUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.link = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AdditionalInfoItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.descr is not None:
            oprot.writeFieldBegin('descr', TType.STRING, 4)
            oprot.writeString(self.descr)
            oprot.writeFieldEnd()
        if self.iconUrl is not None:
            oprot.writeFieldBegin('iconUrl', TType.STRING, 5)
            oprot.writeString(self.iconUrl)
            oprot.writeFieldEnd()
        if self.link is not None:
            oprot.writeFieldBegin('link', TType.STRING, 6)
            oprot.writeString(self.link)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.descr))
        value = (value * 31) ^ hash(make_hashable(self.iconUrl))
        value = (value * 31) ^ hash(make_hashable(self.link))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class YellowpageItem(object):
    """
    Attributes:
     - id
     - mid
     - name
     - address
     - latitude
     - longitude
     - distance
     - canFreeCall
     - countryCode
     - phoneNumber
     - categoryId
     - categoryIcon
     - additionalInfo
    """
    def __init__(self, id=None, mid=None, name=None, address=None, latitude=None, longitude=None, distance=None, canFreeCall=None, countryCode=None, phoneNumber=None, categoryId=None, categoryIcon=None, additionalInfo=None):
        self.id = id
        self.mid = mid
        self.name = name
        self.address = address
        self.latitude = latitude
        self.longitude = longitude
        self.distance = distance
        self.canFreeCall = canFreeCall
        self.countryCode = countryCode
        self.phoneNumber = phoneNumber
        self.categoryId = categoryId
        self.categoryIcon = categoryIcon
        self.additionalInfo = additionalInfo

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.address = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.canFreeCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.countryCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.phoneNumber = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.categoryId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.categoryIcon = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.additionalInfo = []
                    (_, elem12) = iprot.readListBegin()
                    for _ in range(elem12):
                        elem13 = AdditionalInfoItem()
                        elem13.read(iprot)
                        self.additionalInfo.append(elem13)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('YellowpageItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 4)
            oprot.writeString(self.address)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 5)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 6)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.DOUBLE, 7)
            oprot.writeDouble(self.distance)
            oprot.writeFieldEnd()
        if self.canFreeCall is not None:
            oprot.writeFieldBegin('canFreeCall', TType.BOOL, 8)
            oprot.writeBool(self.canFreeCall)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.I32, 9)
            oprot.writeI32(self.countryCode)
            oprot.writeFieldEnd()
        if self.phoneNumber is not None:
            oprot.writeFieldBegin('phoneNumber', TType.STRING, 10)
            oprot.writeString(self.phoneNumber)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.I32, 11)
            oprot.writeI32(self.categoryId)
            oprot.writeFieldEnd()
        if self.categoryIcon is not None:
            oprot.writeFieldBegin('categoryIcon', TType.I32, 12)
            oprot.writeI32(self.categoryIcon)
            oprot.writeFieldEnd()
        if self.additionalInfo is not None:
            oprot.writeFieldBegin('additionalInfo', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.additionalInfo))
            for elem14 in self.additionalInfo:
                elem14.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.address))
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        value = (value * 31) ^ hash(make_hashable(self.distance))
        value = (value * 31) ^ hash(make_hashable(self.canFreeCall))
        value = (value * 31) ^ hash(make_hashable(self.countryCode))
        value = (value * 31) ^ hash(make_hashable(self.phoneNumber))
        value = (value * 31) ^ hash(make_hashable(self.categoryId))
        value = (value * 31) ^ hash(make_hashable(self.categoryIcon))
        value = (value * 31) ^ hash(make_hashable(self.additionalInfo))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BuddySearchResult(object):
    """
    Attributes:
     - mid
     - displayName
     - pictureStatus
     - picturePath
     - statusMessage
     - businessAccount
     - iconType
     - botType
    """
    def __init__(self, mid=None, displayName=None, pictureStatus=None, picturePath=None, statusMessage=None, businessAccount=None, iconType=None, botType=None):
        self.mid = mid
        self.displayName = displayName
        self.pictureStatus = pictureStatus
        self.picturePath = picturePath
        self.statusMessage = statusMessage
        self.businessAccount = businessAccount
        self.iconType = iconType
        self.botType = botType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.businessAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.iconType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.botType = BotType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BuddySearchResult')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 3)
            oprot.writeString(self.pictureStatus)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 4)
            oprot.writeString(self.picturePath)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 5)
            oprot.writeString(self.statusMessage)
            oprot.writeFieldEnd()
        if self.businessAccount is not None:
            oprot.writeFieldBegin('businessAccount', TType.BOOL, 6)
            oprot.writeBool(self.businessAccount)
            oprot.writeFieldEnd()
        if self.iconType is not None:
            oprot.writeFieldBegin('iconType', TType.I32, 7)
            oprot.writeI32(self.iconType)
            oprot.writeFieldEnd()
        if self.botType is not None:
            oprot.writeFieldBegin('botType', TType.I32, 8)
            oprot.writeI32(self.botType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.displayName))
        value = (value * 31) ^ hash(make_hashable(self.pictureStatus))
        value = (value * 31) ^ hash(make_hashable(self.picturePath))
        value = (value * 31) ^ hash(make_hashable(self.statusMessage))
        value = (value * 31) ^ hash(make_hashable(self.businessAccount))
        value = (value * 31) ^ hash(make_hashable(self.iconType))
        value = (value * 31) ^ hash(make_hashable(self.botType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GeoAddressItem(object):
    """
    Attributes:
     - latitude
     - longitude
     - displayAddress
    """
    def __init__(self, latitude=None, longitude=None, displayAddress=None):
        self.latitude = latitude
        self.longitude = longitude
        self.displayAddress = displayAddress

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.displayAddress = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GeoAddressItem')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.displayAddress is not None:
            oprot.writeFieldBegin('displayAddress', TType.STRING, 3)
            oprot.writeString(self.displayAddress)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        value = (value * 31) ^ hash(make_hashable(self.displayAddress))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AddFriendData(object):
    """
    Attributes:
     - mid
    """
    def __init__(self, mid=None):
        self.mid = mid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AddFriendData')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class InstallAppData(object):
    """
    Attributes:
     - installData
    """
    def __init__(self, installData=None):
        self.installData = installData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.installData = {}
                    (_, _, elem15) = iprot.readMapBegin()
                    for _ in range(elem15):
                        elem17 = iprot.readString()
                        elem16 = iprot.readString()
                        self.installData[elem17] = elem16
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('InstallAppData')
        if self.installData is not None:
            oprot.writeFieldBegin('installData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.installData))
            for elem19, elem18 in self.installData.items():
                oprot.writeString(elem19)
                oprot.writeString(elem18)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.installData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class JumpUrlData(object):
    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('JumpUrlData')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ButtonActionData(object):
    """
    Attributes:
     - addFriendData
     - installAppData
     - jumpUrlData
    """
    def __init__(self, addFriendData=None, installAppData=None, jumpUrlData=None):
        self.addFriendData = addFriendData
        self.installAppData = installAppData
        self.jumpUrlData = jumpUrlData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.addFriendData = AddFriendData()
                    self.addFriendData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.installAppData = InstallAppData()
                    self.installAppData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.jumpUrlData = JumpUrlData()
                    self.jumpUrlData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ButtonActionData')
        if self.addFriendData is not None:
            oprot.writeFieldBegin('addFriendData', TType.STRUCT, 1)
            self.addFriendData.write(oprot)
            oprot.writeFieldEnd()
        if self.installAppData is not None:
            oprot.writeFieldBegin('installAppData', TType.STRUCT, 2)
            self.installAppData.write(oprot)
            oprot.writeFieldEnd()
        if self.jumpUrlData is not None:
            oprot.writeFieldBegin('jumpUrlData', TType.STRUCT, 3)
            self.jumpUrlData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.addFriendData))
        value = (value * 31) ^ hash(make_hashable(self.installAppData))
        value = (value * 31) ^ hash(make_hashable(self.jumpUrlData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ShortcutButtonAction(object):
    """
    Attributes:
     - actionType
     - actionData
    """
    def __init__(self, actionType=None, actionData=None):
        self.actionType = actionType
        self.actionData = actionData

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.actionType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.actionData = ButtonActionData()
                    self.actionData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ShortcutButtonAction')
        if self.actionType is not None:
            oprot.writeFieldBegin('actionType', TType.I32, 1)
            oprot.writeI32(self.actionType)
            oprot.writeFieldEnd()
        if self.actionData is not None:
            oprot.writeFieldBegin('actionData', TType.STRUCT, 2)
            self.actionData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.actionType))
        value = (value * 31) ^ hash(make_hashable(self.actionData))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ShortcutButton(object):
    """
    Attributes:
     - id
     - title
     - url
     - iconPath
     - action
    """
    def __init__(self, id=None, title=None, url=None, iconPath=None, action=None):
        self.id = id
        self.title = title
        self.url = url
        self.iconPath = iconPath
        self.action = action

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.iconPath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.action = ShortcutButtonAction()
                    self.action.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ShortcutButton')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        if self.iconPath is not None:
            oprot.writeFieldBegin('iconPath', TType.STRING, 4)
            oprot.writeString(self.iconPath)
            oprot.writeFieldEnd()
        if self.action is not None:
            oprot.writeFieldBegin('action', TType.STRUCT, 5)
            self.action.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.url))
        value = (value * 31) ^ hash(make_hashable(self.iconPath))
        value = (value * 31) ^ hash(make_hashable(self.action))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ShortcutItem(object):
    """
    Attributes:
     - id
     - title
     - descr
     - iconPath
     - url
     - buttons
     - action
    """
    def __init__(self, id=None, title=None, descr=None, iconPath=None, url=None, buttons=None, action=None):
        self.id = id
        self.title = title
        self.descr = descr
        self.iconPath = iconPath
        self.url = url
        self.buttons = buttons
        self.action = action

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.descr = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.iconPath = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.buttons = []
                    (_, elem20) = iprot.readListBegin()
                    for _ in range(elem20):
                        elem21 = ShortcutButton()
                        elem21.read(iprot)
                        self.buttons.append(elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.action = ShortcutButtonAction()
                    self.action.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ShortcutItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.descr is not None:
            oprot.writeFieldBegin('descr', TType.STRING, 3)
            oprot.writeString(self.descr)
            oprot.writeFieldEnd()
        if self.iconPath is not None:
            oprot.writeFieldBegin('iconPath', TType.STRING, 4)
            oprot.writeString(self.iconPath)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 5)
            oprot.writeString(self.url)
            oprot.writeFieldEnd()
        if self.buttons is not None:
            oprot.writeFieldBegin('buttons', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.buttons))
            for elem22 in self.buttons:
                elem22.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.action is not None:
            oprot.writeFieldBegin('action', TType.STRUCT, 7)
            self.action.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.descr))
        value = (value * 31) ^ hash(make_hashable(self.iconPath))
        value = (value * 31) ^ hash(make_hashable(self.url))
        value = (value * 31) ^ hash(make_hashable(self.buttons))
        value = (value * 31) ^ hash(make_hashable(self.action))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Square(object):
    """
    Attributes:
     - mid
     - name
     - welcomeMessage
     - profileImageObsHash
     - desc
     - searchable
     - type
     - categoryId
     - invitationURL
     - revision
     - ableToUseInvitationTicket
     - state
    """
    def __init__(self, mid=None, name=None, welcomeMessage=None, profileImageObsHash=None, desc=None, searchable=None, type=None, categoryId=None, invitationURL=None, revision=None, ableToUseInvitationTicket=None, state=None):
        self.mid = mid
        self.name = name
        self.welcomeMessage = welcomeMessage
        self.profileImageObsHash = profileImageObsHash
        self.desc = desc
        self.searchable = searchable
        self.type = type
        self.categoryId = categoryId
        self.invitationURL = invitationURL
        self.revision = revision
        self.ableToUseInvitationTicket = ableToUseInvitationTicket
        self.state = state

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.welcomeMessage = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.profileImageObsHash = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.desc = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.searchable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.type = SquareType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.categoryId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.invitationURL = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.ableToUseInvitationTicket = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.state = SquareChatState(iprot.readI32())
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Square')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.welcomeMessage is not None:
            oprot.writeFieldBegin('welcomeMessage', TType.STRING, 3)
            oprot.writeString(self.welcomeMessage)
            oprot.writeFieldEnd()
        if self.profileImageObsHash is not None:
            oprot.writeFieldBegin('profileImageObsHash', TType.STRING, 4)
            oprot.writeString(self.profileImageObsHash)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 5)
            oprot.writeString(self.desc)
            oprot.writeFieldEnd()
        if self.searchable is not None:
            oprot.writeFieldBegin('searchable', TType.BOOL, 6)
            oprot.writeBool(self.searchable)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 7)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.I32, 8)
            oprot.writeI32(self.categoryId)
            oprot.writeFieldEnd()
        if self.invitationURL is not None:
            oprot.writeFieldBegin('invitationURL', TType.STRING, 9)
            oprot.writeString(self.invitationURL)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 10)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.ableToUseInvitationTicket is not None:
            oprot.writeFieldBegin('ableToUseInvitationTicket', TType.BOOL, 11)
            oprot.writeBool(self.ableToUseInvitationTicket)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 12)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.mid))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.welcomeMessage))
        value = (value * 31) ^ hash(make_hashable(self.profileImageObsHash))
        value = (value * 31) ^ hash(make_hashable(self.desc))
        value = (value * 31) ^ hash(make_hashable(self.searchable))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.categoryId))
        value = (value * 31) ^ hash(make_hashable(self.invitationURL))
        value = (value * 31) ^ hash(make_hashable(self.revision))
        value = (value * 31) ^ hash(make_hashable(self.ableToUseInvitationTicket))
        value = (value * 31) ^ hash(make_hashable(self.state))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareStatus(object):
    """
    Attributes:
     - memberCount
     - joinRequestCount
     - lastJoinRequestAt
     - openChatCount
    """
    def __init__(self, memberCount=None, joinRequestCount=None, lastJoinRequestAt=None, openChatCount=None):
        self.memberCount = memberCount
        self.joinRequestCount = joinRequestCount
        self.lastJoinRequestAt = lastJoinRequestAt
        self.openChatCount = openChatCount

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.memberCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joinRequestCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastJoinRequestAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.openChatCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareStatus')
        if self.memberCount is not None:
            oprot.writeFieldBegin('memberCount', TType.I32, 1)
            oprot.writeI32(self.memberCount)
            oprot.writeFieldEnd()
        if self.joinRequestCount is not None:
            oprot.writeFieldBegin('joinRequestCount', TType.I32, 2)
            oprot.writeI32(self.joinRequestCount)
            oprot.writeFieldEnd()
        if self.lastJoinRequestAt is not None:
            oprot.writeFieldBegin('lastJoinRequestAt', TType.I64, 3)
            oprot.writeI64(self.lastJoinRequestAt)
            oprot.writeFieldEnd()
        if self.openChatCount is not None:
            oprot.writeFieldBegin('openChatCount', TType.I32, 4)
            oprot.writeI32(self.openChatCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.memberCount))
        value = (value * 31) ^ hash(make_hashable(self.joinRequestCount))
        value = (value * 31) ^ hash(make_hashable(self.lastJoinRequestAt))
        value = (value * 31) ^ hash(make_hashable(self.openChatCount))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class NoteStatus(object):
    """
    Attributes:
     - noteCount
     - latestCreatedAt
    """
    def __init__(self, noteCount=None, latestCreatedAt=None):
        self.noteCount = noteCount
        self.latestCreatedAt = latestCreatedAt

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.noteCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.latestCreatedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('NoteStatus')
        if self.noteCount is not None:
            oprot.writeFieldBegin('noteCount', TType.I32, 1)
            oprot.writeI32(self.noteCount)
            oprot.writeFieldEnd()
        if self.latestCreatedAt is not None:
            oprot.writeFieldBegin('latestCreatedAt', TType.I64, 2)
            oprot.writeI64(self.latestCreatedAt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.noteCount))
        value = (value * 31) ^ hash(make_hashable(self.latestCreatedAt))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SquareInfo(object):
    """
    Attributes:
     - square
     - squareStatus
     - squareNoteStatus
    """
    def __init__(self, square=None, squareStatus=None, squareNoteStatus=None):
        self.square = square
        self.squareStatus = squareStatus
        self.squareNoteStatus = squareNoteStatus

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.square = Square()
                    self.square.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.squareStatus = SquareStatus()
                    self.squareStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareNoteStatus = NoteStatus()
                    self.squareNoteStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SquareInfo')
        if self.square is not None:
            oprot.writeFieldBegin('square', TType.STRUCT, 1)
            self.square.write(oprot)
            oprot.writeFieldEnd()
        if self.squareStatus is not None:
            oprot.writeFieldBegin('squareStatus', TType.STRUCT, 2)
            self.squareStatus.write(oprot)
            oprot.writeFieldEnd()
        if self.squareNoteStatus is not None:
            oprot.writeFieldBegin('squareNoteStatus', TType.STRUCT, 3)
            self.squareNoteStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.square))
        value = (value * 31) ^ hash(make_hashable(self.squareStatus))
        value = (value * 31) ^ hash(make_hashable(self.squareNoteStatus))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class Category(object):
    """
    Attributes:
     - id
     - name
    """
    def __init__(self, id=None, name=None):
        self.id = id
        self.name = name

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('Category')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.name))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchItemUnion(object):
    """
    Attributes:
     - categoryItem
     - spotItem
     - productItem
     - serviceItem
     - yellowpageItem
     - oaItem
     - geoAddressItem
     - shortcutItem
     - squareItem
     - squareCategoryItem
    """
    def __init__(self, categoryItem=None, spotItem=None, productItem=None, serviceItem=None, yellowpageItem=None, oaItem=None, geoAddressItem=None, shortcutItem=None, squareItem=None, squareCategoryItem=None):
        self.categoryItem = categoryItem
        self.spotItem = spotItem
        self.productItem = productItem
        self.serviceItem = serviceItem
        self.yellowpageItem = yellowpageItem
        self.oaItem = oaItem
        self.geoAddressItem = geoAddressItem
        self.shortcutItem = shortcutItem
        self.squareItem = squareItem
        self.squareCategoryItem = squareCategoryItem

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.categoryItem = CategoryItem()
                    self.categoryItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.spotItem = SpotItem()
                    self.spotItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.productItem = ProductSearchSummary()
                    self.productItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.serviceItem = ServiceItem()
                    self.serviceItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.yellowpageItem = YellowpageItem()
                    self.yellowpageItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.oaItem = BuddySearchResult()
                    self.oaItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.geoAddressItem = GeoAddressItem()
                    self.geoAddressItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.shortcutItem = ShortcutItem()
                    self.shortcutItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.squareItem = SquareInfo()
                    self.squareItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.squareCategoryItem = Category()
                    self.squareCategoryItem.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchItemUnion')
        if self.categoryItem is not None:
            oprot.writeFieldBegin('categoryItem', TType.STRUCT, 1)
            self.categoryItem.write(oprot)
            oprot.writeFieldEnd()
        if self.spotItem is not None:
            oprot.writeFieldBegin('spotItem', TType.STRUCT, 2)
            self.spotItem.write(oprot)
            oprot.writeFieldEnd()
        if self.productItem is not None:
            oprot.writeFieldBegin('productItem', TType.STRUCT, 3)
            self.productItem.write(oprot)
            oprot.writeFieldEnd()
        if self.serviceItem is not None:
            oprot.writeFieldBegin('serviceItem', TType.STRUCT, 4)
            self.serviceItem.write(oprot)
            oprot.writeFieldEnd()
        if self.yellowpageItem is not None:
            oprot.writeFieldBegin('yellowpageItem', TType.STRUCT, 5)
            self.yellowpageItem.write(oprot)
            oprot.writeFieldEnd()
        if self.oaItem is not None:
            oprot.writeFieldBegin('oaItem', TType.STRUCT, 6)
            self.oaItem.write(oprot)
            oprot.writeFieldEnd()
        if self.geoAddressItem is not None:
            oprot.writeFieldBegin('geoAddressItem', TType.STRUCT, 7)
            self.geoAddressItem.write(oprot)
            oprot.writeFieldEnd()
        if self.shortcutItem is not None:
            oprot.writeFieldBegin('shortcutItem', TType.STRUCT, 8)
            self.shortcutItem.write(oprot)
            oprot.writeFieldEnd()
        if self.squareItem is not None:
            oprot.writeFieldBegin('squareItem', TType.STRUCT, 9)
            self.squareItem.write(oprot)
            oprot.writeFieldEnd()
        if self.squareCategoryItem is not None:
            oprot.writeFieldBegin('squareCategoryItem', TType.STRUCT, 10)
            self.squareCategoryItem.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.categoryItem))
        value = (value * 31) ^ hash(make_hashable(self.spotItem))
        value = (value * 31) ^ hash(make_hashable(self.productItem))
        value = (value * 31) ^ hash(make_hashable(self.serviceItem))
        value = (value * 31) ^ hash(make_hashable(self.yellowpageItem))
        value = (value * 31) ^ hash(make_hashable(self.oaItem))
        value = (value * 31) ^ hash(make_hashable(self.geoAddressItem))
        value = (value * 31) ^ hash(make_hashable(self.shortcutItem))
        value = (value * 31) ^ hash(make_hashable(self.squareItem))
        value = (value * 31) ^ hash(make_hashable(self.squareCategoryItem))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchResultItem(object):
    """
    Attributes:
     - id
     - type
     - item
     - title
     - sub1
     - sub2
     - iconUrl
     - titleLink
     - iconLink
     - displayTemplate
     - additionalInfo
    """
    def __init__(self, id=None, type=None, item=None, title=None, sub1=None, sub2=None, iconUrl=None, titleLink=None, iconLink=None, displayTemplate=None, additionalInfo=None):
        self.id = id
        self.type = type
        self.item = item
        self.title = title
        self.sub1 = sub1
        self.sub2 = sub2
        self.iconUrl = iconUrl
        self.titleLink = titleLink
        self.iconLink = iconLink
        self.displayTemplate = displayTemplate
        self.additionalInfo = additionalInfo

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.item = SearchItemUnion()
                    self.item.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sub1 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sub2 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.iconUrl = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.titleLink = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.iconLink = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayTemplate = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.additionalInfo = []
                    (_, elem23) = iprot.readListBegin()
                    for _ in range(elem23):
                        elem24 = AdditionalInfoItem()
                        elem24.read(iprot)
                        self.additionalInfo.append(elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchResultItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.item is not None:
            oprot.writeFieldBegin('item', TType.STRUCT, 3)
            self.item.write(oprot)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 4)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.sub1 is not None:
            oprot.writeFieldBegin('sub1', TType.STRING, 5)
            oprot.writeString(self.sub1)
            oprot.writeFieldEnd()
        if self.sub2 is not None:
            oprot.writeFieldBegin('sub2', TType.STRING, 6)
            oprot.writeString(self.sub2)
            oprot.writeFieldEnd()
        if self.iconUrl is not None:
            oprot.writeFieldBegin('iconUrl', TType.STRING, 7)
            oprot.writeString(self.iconUrl)
            oprot.writeFieldEnd()
        if self.titleLink is not None:
            oprot.writeFieldBegin('titleLink', TType.STRING, 8)
            oprot.writeString(self.titleLink)
            oprot.writeFieldEnd()
        if self.iconLink is not None:
            oprot.writeFieldBegin('iconLink', TType.STRING, 9)
            oprot.writeString(self.iconLink)
            oprot.writeFieldEnd()
        if self.displayTemplate is not None:
            oprot.writeFieldBegin('displayTemplate', TType.STRING, 10)
            oprot.writeString(self.displayTemplate)
            oprot.writeFieldEnd()
        if self.additionalInfo is not None:
            oprot.writeFieldBegin('additionalInfo', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.additionalInfo))
            for elem25 in self.additionalInfo:
                elem25.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.id))
        value = (value * 31) ^ hash(make_hashable(self.type))
        value = (value * 31) ^ hash(make_hashable(self.item))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.sub1))
        value = (value * 31) ^ hash(make_hashable(self.sub2))
        value = (value * 31) ^ hash(make_hashable(self.iconUrl))
        value = (value * 31) ^ hash(make_hashable(self.titleLink))
        value = (value * 31) ^ hash(make_hashable(self.iconLink))
        value = (value * 31) ^ hash(make_hashable(self.displayTemplate))
        value = (value * 31) ^ hash(make_hashable(self.additionalInfo))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchResultCollection(object):
    """
    Attributes:
     - collection
     - title
     - rank
     - hits
     - items
     - hasNext
     - categoryId
     - error
     - tabTitle
     - start
     - length
     - squareCategoryId
    """
    def __init__(self, collection=None, title=None, rank=None, hits=None, items=None, hasNext=None, categoryId=None, error=None, tabTitle=None, start=None, length=None, squareCategoryId=None):
        self.collection = collection
        self.title = title
        self.rank = rank
        self.hits = hits
        self.items = items
        self.hasNext = hasNext
        self.categoryId = categoryId
        self.error = error
        self.tabTitle = tabTitle
        self.start = start
        self.length = length
        self.squareCategoryId = squareCategoryId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.collection = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.hits = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.items = []
                    (_, elem26) = iprot.readListBegin()
                    for _ in range(elem26):
                        elem27 = SearchResultItem()
                        elem27.read(iprot)
                        self.items.append(elem27)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.categoryId = []
                    (_, elem28) = iprot.readListBegin()
                    for _ in range(elem28):
                        elem29 = iprot.readI32()
                        self.categoryId.append(elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.error = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.tabTitle = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.squareCategoryId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchResultCollection')
        if self.collection is not None:
            oprot.writeFieldBegin('collection', TType.I32, 1)
            oprot.writeI32(self.collection)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title)
            oprot.writeFieldEnd()
        if self.rank is not None:
            oprot.writeFieldBegin('rank', TType.I32, 3)
            oprot.writeI32(self.rank)
            oprot.writeFieldEnd()
        if self.hits is not None:
            oprot.writeFieldBegin('hits', TType.I32, 4)
            oprot.writeI32(self.hits)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for elem30 in self.items:
                elem30.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 6)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.categoryId))
            for elem31 in self.categoryId:
                oprot.writeI32(elem31)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRING, 8)
            oprot.writeString(self.error)
            oprot.writeFieldEnd()
        if self.tabTitle is not None:
            oprot.writeFieldBegin('tabTitle', TType.STRING, 9)
            oprot.writeString(self.tabTitle)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 10)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 11)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        if self.squareCategoryId is not None:
            oprot.writeFieldBegin('squareCategoryId', TType.I32, 12)
            oprot.writeI32(self.squareCategoryId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.collection))
        value = (value * 31) ^ hash(make_hashable(self.title))
        value = (value * 31) ^ hash(make_hashable(self.rank))
        value = (value * 31) ^ hash(make_hashable(self.hits))
        value = (value * 31) ^ hash(make_hashable(self.items))
        value = (value * 31) ^ hash(make_hashable(self.hasNext))
        value = (value * 31) ^ hash(make_hashable(self.categoryId))
        value = (value * 31) ^ hash(make_hashable(self.error))
        value = (value * 31) ^ hash(make_hashable(self.tabTitle))
        value = (value * 31) ^ hash(make_hashable(self.start))
        value = (value * 31) ^ hash(make_hashable(self.length))
        value = (value * 31) ^ hash(make_hashable(self.squareCategoryId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchResult(object):
    """
    Attributes:
     - sid
     - collections
     - start
     - length
    """
    def __init__(self, sid=None, collections=None, start=None, length=None):
        self.sid = sid
        self.collections = collections
        self.start = start
        self.length = length

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.collections = []
                    (_, elem32) = iprot.readListBegin()
                    for _ in range(elem32):
                        elem33 = SearchResultCollection()
                        elem33.read(iprot)
                        self.collections.append(elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchResult')
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 1)
            oprot.writeString(self.sid)
            oprot.writeFieldEnd()
        if self.collections is not None:
            oprot.writeFieldBegin('collections', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.collections))
            for elem34 in self.collections:
                elem34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 3)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 4)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.sid))
        value = (value * 31) ^ hash(make_hashable(self.collections))
        value = (value * 31) ^ hash(make_hashable(self.start))
        value = (value * 31) ^ hash(make_hashable(self.length))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchCommonParameter(object):
    """
    Attributes:
     - latitude
     - longitude
     - source
     - region
     - sid
     - queryType
    """
    def __init__(self, latitude=None, longitude=None, source=None, region=None, sid=None, queryType=None):
        self.latitude = latitude
        self.longitude = longitude
        self.source = source
        self.region = region
        self.sid = sid
        self.queryType = queryType

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.source = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.region = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.queryType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchCommonParameter')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 3)
            oprot.writeString(self.source)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 4)
            oprot.writeString(self.region)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 5)
            oprot.writeString(self.sid)
            oprot.writeFieldEnd()
        if self.queryType is not None:
            oprot.writeFieldBegin('queryType', TType.I32, 6)
            oprot.writeI32(self.queryType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.latitude))
        value = (value * 31) ^ hash(make_hashable(self.longitude))
        value = (value * 31) ^ hash(make_hashable(self.source))
        value = (value * 31) ^ hash(make_hashable(self.region))
        value = (value * 31) ^ hash(make_hashable(self.sid))
        value = (value * 31) ^ hash(make_hashable(self.queryType))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchPagingParameter(object):
    """
    Attributes:
     - collection
     - start
     - length
     - commonParam
    """
    def __init__(self, collection=None, start=None, length=None, commonParam=None):
        self.collection = collection
        self.start = start
        self.length = length
        self.commonParam = commonParam

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.collection = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.commonParam = SearchCommonParameter()
                    self.commonParam.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchPagingParameter')
        if self.collection is not None:
            oprot.writeFieldBegin('collection', TType.I32, 1)
            oprot.writeI32(self.collection)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 2)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I32, 3)
            oprot.writeI32(self.length)
            oprot.writeFieldEnd()
        if self.commonParam is not None:
            oprot.writeFieldBegin('commonParam', TType.STRUCT, 4)
            self.commonParam.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.collection))
        value = (value * 31) ^ hash(make_hashable(self.start))
        value = (value * 31) ^ hash(make_hashable(self.length))
        value = (value * 31) ^ hash(make_hashable(self.commonParam))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class AutocompleteRequest(object):
    """
    Attributes:
     - query
     - region
     - source
     - sid
    """
    def __init__(self, query=None, region=None, source=None, sid=None):
        self.query = query
        self.region = region
        self.source = source
        self.sid = sid

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.query = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.region = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.source = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sid = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('AutocompleteRequest')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRING, 1)
            oprot.writeString(self.query)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 2)
            oprot.writeString(self.region)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.I32, 3)
            oprot.writeI32(self.source)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 4)
            oprot.writeString(self.sid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.query))
        value = (value * 31) ^ hash(make_hashable(self.region))
        value = (value * 31) ^ hash(make_hashable(self.source))
        value = (value * 31) ^ hash(make_hashable(self.sid))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class SearchException(TException):
    """
    Attributes:
     - code
     - reason
     - extra
    """
    def __init__(self, code=None, reason=None, extra=None):
        self.code = code
        self.reason = reason
        self.extra = extra

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = SearchErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.extra = {}
                    (_, _, elem35) = iprot.readMapBegin()
                    for _ in range(elem35):
                        elem37 = iprot.readString()
                        elem36 = iprot.readString()
                        self.extra[elem37] = elem36
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('SearchException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra))
            for elem39, elem38 in self.extra.items():
                oprot.writeString(elem39)
                oprot.writeString(elem38)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        value = (value * 31) ^ hash(make_hashable(self.extra))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


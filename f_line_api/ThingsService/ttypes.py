#
# Autogenerated by Frugal Compiler (3.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from frugal.util import make_hashable
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol


class ThingsDeviceProductType(int):
    CLOUD = 1
    BLE = 2

    _VALUES_TO_NAMES = {
        1: "CLOUD",
        2: "BLE",
    }

    _NAMES_TO_VALUES = {
        "CLOUD": 1,
        "BLE": 2,
    }

class ThingsErrorCode(int):
    INTERNAL_SERVER_ERROR = 0
    UNAUTHORIZED = 1
    INVALID_REQUEST = 2
    INVALID_STATE = 3

    _VALUES_TO_NAMES = {
        0: "INTERNAL_SERVER_ERROR",
        1: "UNAUTHORIZED",
        2: "INVALID_REQUEST",
        3: "INVALID_STATE",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_SERVER_ERROR": 0,
        "UNAUTHORIZED": 1,
        "INVALID_REQUEST": 2,
        "INVALID_STATE": 3,
    }

class ThingsDevice(object):
    """
    Attributes:
     - deviceId
     - actionUri
     - botMid
     - productType
     - providerName
     - profileImageLocation
     - channelIdList
    """
    def __init__(self, deviceId=None, actionUri=None, botMid=None, productType=None, providerName=None, profileImageLocation=None, channelIdList=None):
        self.deviceId = deviceId
        self.actionUri = actionUri
        self.botMid = botMid
        self.productType = productType
        self.providerName = providerName
        self.profileImageLocation = profileImageLocation
        self.channelIdList = channelIdList

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.actionUri = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.botMid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.productType = ThingsDeviceProductType(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.providerName = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.profileImageLocation = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.channelIdList = []
                    (_, elem0) = iprot.readListBegin()
                    for _ in range(elem0):
                        elem1 = iprot.readString()
                        self.channelIdList.append(elem1)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ThingsDevice')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId)
            oprot.writeFieldEnd()
        if self.actionUri is not None:
            oprot.writeFieldBegin('actionUri', TType.STRING, 2)
            oprot.writeString(self.actionUri)
            oprot.writeFieldEnd()
        if self.botMid is not None:
            oprot.writeFieldBegin('botMid', TType.STRING, 3)
            oprot.writeString(self.botMid)
            oprot.writeFieldEnd()
        if self.productType is not None:
            oprot.writeFieldBegin('productType', TType.I32, 4)
            oprot.writeI32(self.productType)
            oprot.writeFieldEnd()
        if self.providerName is not None:
            oprot.writeFieldBegin('providerName', TType.STRING, 5)
            oprot.writeString(self.providerName)
            oprot.writeFieldEnd()
        if self.profileImageLocation is not None:
            oprot.writeFieldBegin('profileImageLocation', TType.STRING, 6)
            oprot.writeString(self.profileImageLocation)
            oprot.writeFieldEnd()
        if self.channelIdList is not None:
            oprot.writeFieldBegin('channelIdList', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.channelIdList))
            for elem2 in self.channelIdList:
                oprot.writeString(elem2)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.deviceId))
        value = (value * 31) ^ hash(make_hashable(self.actionUri))
        value = (value * 31) ^ hash(make_hashable(self.botMid))
        value = (value * 31) ^ hash(make_hashable(self.productType))
        value = (value * 31) ^ hash(make_hashable(self.providerName))
        value = (value * 31) ^ hash(make_hashable(self.profileImageLocation))
        value = (value * 31) ^ hash(make_hashable(self.channelIdList))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class BleProduct(object):
    """
    Attributes:
     - serviceUuid
     - psdiServiceUuid
     - psdiCharacteristicUuid
     - name
     - profileImageLocation
    """
    def __init__(self, serviceUuid=None, psdiServiceUuid=None, psdiCharacteristicUuid=None, name=None, profileImageLocation=None):
        self.serviceUuid = serviceUuid
        self.psdiServiceUuid = psdiServiceUuid
        self.psdiCharacteristicUuid = psdiCharacteristicUuid
        self.name = name
        self.profileImageLocation = profileImageLocation

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceUuid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.psdiServiceUuid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.psdiCharacteristicUuid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.profileImageLocation = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('BleProduct')
        if self.serviceUuid is not None:
            oprot.writeFieldBegin('serviceUuid', TType.STRING, 1)
            oprot.writeString(self.serviceUuid)
            oprot.writeFieldEnd()
        if self.psdiServiceUuid is not None:
            oprot.writeFieldBegin('psdiServiceUuid', TType.STRING, 2)
            oprot.writeString(self.psdiServiceUuid)
            oprot.writeFieldEnd()
        if self.psdiCharacteristicUuid is not None:
            oprot.writeFieldBegin('psdiCharacteristicUuid', TType.STRING, 3)
            oprot.writeString(self.psdiCharacteristicUuid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.profileImageLocation is not None:
            oprot.writeFieldBegin('profileImageLocation', TType.STRING, 5)
            oprot.writeString(self.profileImageLocation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.serviceUuid))
        value = (value * 31) ^ hash(make_hashable(self.psdiServiceUuid))
        value = (value * 31) ^ hash(make_hashable(self.psdiCharacteristicUuid))
        value = (value * 31) ^ hash(make_hashable(self.name))
        value = (value * 31) ^ hash(make_hashable(self.profileImageLocation))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class UserDevice(object):
    """
    Attributes:
     - device
     - deviceDisplayName
    """
    def __init__(self, device=None, deviceDisplayName=None):
        self.device = device
        self.deviceDisplayName = deviceDisplayName

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.device = ThingsDevice()
                    self.device.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceDisplayName = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('UserDevice')
        if self.device is not None:
            oprot.writeFieldBegin('device', TType.STRUCT, 1)
            self.device.write(oprot)
            oprot.writeFieldEnd()
        if self.deviceDisplayName is not None:
            oprot.writeFieldBegin('deviceDisplayName', TType.STRING, 2)
            oprot.writeString(self.deviceDisplayName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.device))
        value = (value * 31) ^ hash(make_hashable(self.deviceDisplayName))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class GetBleDeviceRequest(object):
    """
    Attributes:
     - serviceUuid
     - psdi
    """
    def __init__(self, serviceUuid=None, psdi=None):
        self.serviceUuid = serviceUuid
        self.psdi = psdi

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceUuid = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.psdi = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('GetBleDeviceRequest')
        if self.serviceUuid is not None:
            oprot.writeFieldBegin('serviceUuid', TType.STRING, 1)
            oprot.writeString(self.serviceUuid)
            oprot.writeFieldEnd()
        if self.psdi is not None:
            oprot.writeFieldBegin('psdi', TType.STRING, 2)
            oprot.writeString(self.psdi)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.serviceUuid))
        value = (value * 31) ^ hash(make_hashable(self.psdi))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeviceLinkRequest(object):
    """
    Attributes:
     - deviceId
    """
    def __init__(self, deviceId=None):
        self.deviceId = deviceId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeviceLinkRequest')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.deviceId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class DeviceUnlinkRequest(object):
    """
    Attributes:
     - deviceId
    """
    def __init__(self, deviceId=None):
        self.deviceId = deviceId

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('DeviceUnlinkRequest')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.deviceId))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class ThingsException(TException):
    """
    Attributes:
     - code
     - reason
    """
    def __init__(self, code=None, reason=None):
        self.code = code
        self.reason = reason

    def read(self, iprot):
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = ThingsErrorCode(iprot.readI32())
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        self.validate()

    def write(self, oprot):
        self.validate()
        oprot.writeStructBegin('ThingsException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __hash__(self):
        value = 17
        value = (value * 31) ^ hash(make_hashable(self.code))
        value = (value * 31) ^ hash(make_hashable(self.reason))
        return value

    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

